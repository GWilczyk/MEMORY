{"version":3,"sources":["Card.js","GuessCount.js","HallOfFame.js","HighScoreInput.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","card","feedback","index","onClick","className","GuessCount","guesses","HallOfFame","entries","map","id","date","player","key","saveHOFEntry","entry","onStored","Date","toLocaleDateString","now","JSON","parse","localStorage","getItem","insertionPoint","findIndex","push","splice","length","setItem","stringify","HighScoreInput","state","winner","handleWinnerUpdate","event","setState","target","value","toUpperCase","persistWinner","preventDefault","props","onSubmit","this","type","autoComplete","onChange","Component","App","cards","generateCards","currentPair","hallOfFame","matchedCardIndices","displayHallOfFame","handleCardClick","handleNewPairClosedBy","result","candidates","shuffle","SIDE","pop","indexMatched","includes","newPair","newGuesses","matched","setTimeout","won","getFeedbackForCard","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.31bf8f55.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport './Card.css';\n\nconst HIDDEN_SYMBOL = '‚ùì';\n\nconst Card = ({ card, feedback, index, onClick }) => (\n  <div className={`card ${feedback}`} onClick={() => onClick(index)}>\n    <span className='symbol'>\n      {feedback === 'hidden' ? HIDDEN_SYMBOL : card}\n    </span>\n  </div>\n);\n\nCard.propTypes = {\n  card: PropTypes.string.isRequired,\n  feedback: PropTypes.oneOf([\n    'visible',\n    'hidden',\n    'justMismatched',\n    'justMatched',\n  ]).isRequired,\n  index: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Card;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport './GuessCount.css';\n\nconst GuessCount = ({ guesses }) => <div className='guesses'>{guesses}</div>;\n\nGuessCount.propTypes = {\n  guesses: PropTypes.number.isRequired,\n};\n\nexport default GuessCount;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport './HallOfFame.css';\n\nconst HallOfFame = ({ entries }) => (\n  <table className='hallOfFame'>\n    <tbody>\n      {entries.map(({ id, guesses, date, player }) => (\n        <tr key={id}>\n          <td className='date'>{date}</td>\n          <td className='guesses'>{guesses}</td>\n          <td className='player'>{player}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n\nHallOfFame.propTypes = {\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      guesses: PropTypes.number.isRequired,\n      date: PropTypes.string.isRequired,\n      player: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\nexport default HallOfFame;\n\n// == Internal helpers ==============================================\n\n// export const FAKE_HOF = [\n//   { id: 3, guesses: 18, date: '10/10/2017', player: 'Jane' },\n//   { id: 2, guesses: 23, date: '11/10/2017', player: 'Kevin' },\n//   { id: 1, guesses: 31, date: '06/10/2017', player: 'Louisa' },\n//   { id: 0, guesses: 48, date: '14/10/2017', player: 'Marc' },\n// ];\n\nconst HOF_KEY = '::Memory::HallofFame';\nconst HOF_MAX_SIZE = 10;\n\nexport function saveHOFEntry(entry, onStored) {\n  entry.date = new Date().toLocaleDateString();\n  entry.id = Date.now();\n\n  const entries = JSON.parse(localStorage.getItem(HOF_KEY) || '[]');\n  const insertionPoint = entries.findIndex(\n    ({ guesses }) => guesses >= entry.guesses\n  );\n\n  if (insertionPoint === -1) {\n    entries.push(entry);\n  } else {\n    entries.splice(insertionPoint, 0, entry);\n  }\n  if (entries.length > HOF_MAX_SIZE) {\n    entries.splice(HOF_MAX_SIZE, entries.length);\n  }\n\n  localStorage.setItem(HOF_KEY, JSON.stringify(entries));\n  onStored(entries);\n}\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nimport './HighScoreInput.css';\n\nimport { saveHOFEntry } from './HallOfFame';\n\nclass HighScoreInput extends Component {\n  state = {\n    winner: '',\n  };\n\n  //   Arrow fx for binding\n  handleWinnerUpdate = (event) => {\n    this.setState({ winner: event.target.value.toUpperCase() });\n  };\n\n  //   Arrow fx for binding\n  persistWinner = (event) => {\n    event.preventDefault();\n    const newEntry = { guesses: this.props.guesses, player: this.state.winner };\n    saveHOFEntry(newEntry, this.props.onStored);\n  };\n\n  render() {\n    return (\n      <form className='highScoreInput' onSubmit={this.persistWinner}>\n        <p>\n          <label>\n            Bravo ! Entre ton pr√©nom :\n            <input\n              type='text'\n              autoComplete='given-name'\n              value={this.state.winner}\n              onChange={this.handleWinnerUpdate}\n            />\n          </label>\n          <button type='submit'>J‚Äôai gagn√© !</button>\n        </p>\n      </form>\n    );\n  }\n}\n\nHighScoreInput.propTypes = {\n  guesses: PropTypes.number.isRequired,\n  onStored: PropTypes.func.isRequired,\n};\n\nexport default HighScoreInput;\n","import React, { Component } from 'react';\nimport shuffle from 'lodash.shuffle';\n\nimport './App.css';\n\nimport Card from './Card';\nimport GuessCount from './GuessCount';\nimport HallOfFame from './HallOfFame';\nimport HighScoreInput from './HighScoreInput';\n\nconst SIDE = 6;\nconst SYMBOLS = 'üòÄüéâüíñüé©üê∂üê±ü¶Ñüê¨üåçüåõüåûüí´üçéüçåüçìüçêüçüüçø';\nconst VISUAL_PAUSE_MSECS = 750;\n\nclass App extends Component {\n  state = {\n    cards: this.generateCards(),\n    currentPair: [],\n    guesses: 0,\n    hallOfFame: null,\n    matchedCardIndices: [],\n  };\n\n  // Arrow function for binding\n  displayHallOfFame = (hallOfFame) => {\n    this.setState({ hallOfFame });\n  };\n\n  generateCards() {\n    const result = [];\n    const size = SIDE * SIDE;\n    const candidates = shuffle(SYMBOLS);\n    while (result.length < size) {\n      const card = candidates.pop();\n      result.push(card, card);\n    }\n    return shuffle(result);\n  }\n\n  getFeedbackForCard(index) {\n    const { currentPair, matchedCardIndices } = this.state;\n    const indexMatched = matchedCardIndices.includes(index);\n\n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden';\n    }\n\n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched';\n    }\n\n    return indexMatched ? 'visible' : 'hidden';\n  }\n\n  // Arrow function for binding\n  handleCardClick = (index) => {\n    const { currentPair } = this.state;\n\n    if (currentPair.length === 2) {\n      return;\n    }\n    if (currentPair.length === 0) {\n      this.setState({ currentPair: [index] });\n      return;\n    }\n\n    this.handleNewPairClosedBy(index);\n  };\n\n  handleNewPairClosedBy(index) {\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state;\n\n    const newPair = [currentPair[0], index];\n    const newGuesses = guesses + 1;\n    const matched =\n      cards[newPair[0]] === cards[newPair[1]] && newPair[0] !== newPair[1];\n    this.setState({ currentPair: newPair, guesses: newGuesses });\n\n    if (matched) {\n      this.setState({\n        matchedCardIndices: [...matchedCardIndices, ...newPair],\n      });\n    }\n    setTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS);\n  }\n\n  render() {\n    const { cards, guesses, hallOfFame, matchedCardIndices } = this.state;\n    const won = matchedCardIndices.length === cards.length;\n    return (\n      <div className='memory'>\n        <GuessCount guesses={guesses} />\n        {cards.map((card, index) => (\n          <Card\n            card={card}\n            feedback={this.getFeedbackForCard(index)}\n            index={index}\n            key={index}\n            onClick={this.handleCardClick}\n          />\n        ))}\n        {won &&\n          (hallOfFame ? (\n            <HallOfFame entries={hallOfFame} />\n          ) : (\n            <HighScoreInput\n              guesses={guesses}\n              onStored={this.displayHallOfFame}\n            />\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nregisterServiceWorker();\n"],"sourceRoot":""}