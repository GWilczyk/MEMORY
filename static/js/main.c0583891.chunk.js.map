{"version":3,"sources":["Card.js","GuessCount.js","HallOfFame.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","card","feedback","index","onClick","className","GuessCount","guesses","HallOfFame","entries","map","id","date","player","key","FAKE_HOF","App","state","cards","generateCards","currentPair","matchedCardIndices","handleCardClick","length","handleNewPairClosedBy","setState","result","candidates","shuffle","SIDE","pop","push","this","indexMatched","includes","newPair","newGuesses","matched","setTimeout","won","getFeedbackForCard","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c0583891.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport './Card.css';\n\nconst HIDDEN_SYMBOL = '❓';\n\nconst Card = ({ card, feedback, index, onClick }) => (\n  <div className={`card ${feedback}`} onClick={() => onClick(index)}>\n    <span className='symbol'>\n      {feedback === 'hidden' ? HIDDEN_SYMBOL : card}\n    </span>\n  </div>\n);\n\nCard.propTypes = {\n  card: PropTypes.string.isRequired,\n  feedback: PropTypes.oneOf([\n    'visible',\n    'hidden',\n    'justMismatched',\n    'justMatched',\n  ]).isRequired,\n  index: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Card;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport './GuessCount.css';\n\nconst GuessCount = ({ guesses }) => <div className='guesses'>{guesses}</div>;\n\nGuessCount.propTypes = {\n  guesses: PropTypes.number.isRequired,\n};\n\nexport default GuessCount;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport './HallOfFame.css';\n\nconst HallOfFame = ({ entries }) => (\n  <table className='hallOfFame'>\n    <tbody>\n      {entries.map(({ id, guesses, date, player }) => (\n        <tr key={id}>\n          <td className='guesses'>{guesses}</td>\n          <td className='date'>{date}</td>\n          <td className='player'>{player}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n\nHallOfFame.propTypes = {\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      guesses: PropTypes.number.isRequired,\n      date: PropTypes.string.isRequired,\n      player: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\nexport default HallOfFame;\n\n// == Internal helpers ==============================================\n\nexport const FAKE_HOF = [\n  { id: 3, guesses: 18, date: '10/10/2017', player: 'Jane' },\n  { id: 2, guesses: 23, date: '11/10/2017', player: 'Kevin' },\n  { id: 1, guesses: 31, date: '06/10/2017', player: 'Louisa' },\n  { id: 0, guesses: 48, date: '14/10/2017', player: 'Marc' },\n];\n","import React, { Component } from 'react';\nimport shuffle from 'lodash.shuffle';\n\nimport './App.css';\n\nimport Card from './Card';\nimport GuessCount from './GuessCount';\nimport HallOfFame, { FAKE_HOF } from './HallOfFame';\n\nconst SIDE = 6;\nconst SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿';\nconst VISUAL_PAUSE_MSECS = 750;\n\nclass App extends Component {\n  state = {\n    cards: this.generateCards(),\n    currentPair: [],\n    guesses: 0,\n    matchedCardIndices: [],\n  };\n\n  generateCards() {\n    const result = [];\n    const size = SIDE * SIDE;\n    const candidates = shuffle(SYMBOLS);\n    while (result.length < size) {\n      const card = candidates.pop();\n      result.push(card, card);\n    }\n    return shuffle(result);\n  }\n\n  getFeedbackForCard(index) {\n    const { currentPair, matchedCardIndices } = this.state;\n    const indexMatched = matchedCardIndices.includes(index);\n\n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden';\n    }\n\n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched';\n    }\n\n    return indexMatched ? 'visible' : 'hidden';\n  }\n\n  // Arrow function for binding\n  handleCardClick = (index) => {\n    const { currentPair } = this.state;\n\n    if (currentPair.length === 2) {\n      return;\n    }\n    if (currentPair.length === 0) {\n      this.setState({ currentPair: [index] });\n      return;\n    }\n\n    this.handleNewPairClosedBy(index);\n  };\n\n  handleNewPairClosedBy(index) {\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state;\n\n    const newPair = [currentPair[0], index];\n    const newGuesses = guesses + 1;\n    const matched =\n      cards[newPair[0]] === cards[newPair[1]] && newPair[0] !== newPair[1];\n    this.setState({ currentPair: newPair, guesses: newGuesses });\n\n    if (matched) {\n      this.setState({\n        matchedCardIndices: [...matchedCardIndices, ...newPair],\n      });\n    }\n    setTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS);\n  }\n\n  render() {\n    const { cards, guesses, matchedCardIndices } = this.state;\n    const won = matchedCardIndices.length === cards.length;\n    return (\n      <div className='memory'>\n        <GuessCount guesses={guesses} />\n        {cards.map((card, index) => (\n          <Card\n            card={card}\n            feedback={this.getFeedbackForCard(index)}\n            index={index}\n            key={index}\n            onClick={this.handleCardClick}\n          />\n        ))}\n        {won && <HallOfFame entries={FAKE_HOF} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nregisterServiceWorker();\n"],"sourceRoot":""}